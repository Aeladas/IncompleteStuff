#Mechanics calculator.
#This will help you with dynamics and other mechanics equations.

#Young's modulus, stress, strain, Sheer forces diagrams, Bending moment diagrams, Force, Potential energy, Kinetic Energy, Drag force, momentum;
#Friction force, SUVATS,

#Import the time and math modules to perform essential operations. Furthermore, the thread module will enable us to view 4 windows at once!
import math
from time import sleep
from tkinter import *
import tkinter
import turtle

window = Tk()
window.geometry("825x375")
window.title("Choices")

#Constant varibles that are localised.
Pie = float(3.14159265359)

#Arrays used for confirmation.
forceChoices = ["acceleration","force","mass"]
youngsChoices = ["strain","stress","youngs"]
strainChoices = ["changeInLength","length","strain"]
stressChoices = ["area","force","stress"]
potentialChoices = ["gravity","height","mass","potential"]
kineticsChoices = ["energy","mass","velocity"]
momentumChoices = ["mass","momentum","velocity"]
frictionChoices = ["coefficient","friction","nornal"]
centroidChoices = ["triangleSquare", "triangleSemi-circle"]

def Force():
    print("----------")
    sleep(1)
    print("This function will help you calculate Force, mass and acceleration.")
    sleep(1)
    print("Type either 'acceleration', 'force' or 'mass' to begin solving the desired equation.")
    sleep(1)
    print("------")
    forceInput = input("What's your choice? -> ")
    if forceInput == forceChoices[0]:
        print("So you want to calculate acceleration.\nThe equation is - Acceleration = Force / Mass")
        sleep(1)
        forceA = float(input("What's the force in newtons? -> "))
        massA = float(input("What's the mass of the object in kg -> "))
        accelerationA = float(forceA) / float(massA)
        print("The acceleration of the object in ms-2 is",'{:3f}'.format(accelerationA) )
    elif forceInput == forceChoices[1]:
        print("To calculate the force acting upon an object we use the equation;\nForce = Mass * Acceleration")
        sleep(1)
        massF = float(input("What's the mass of the object(Kg)? -> "))
        accelerationF = float(input("What's the acceleration of the object(ms^-2) -> "))
        forceF = float(massF) * float(accelerationF)
        sleep(1)
        print("The force in netwons is:",'{:3f}'.format(forceF))
    elif forceInput == forceChoices[2]:
        print("In order to calculate mass you need to know the force as well as the acceleration.\nThe equation is: Mass = Force / Acceleration")
        forceM = float(input("What's the force(N)? -> "))
        accelerationM = float(input("What's the acceleration(ms^-2)? -> "))
        massM = float(forceM) / float(accelerationM)
        sleep(1)
        print("The mass of the object in kilograms is:",'{:3f}'.format(massM))

def Youngs_Modulus():
    print("With this function you can not only calculate the Young's modulus but also stress and strain!")
    sleep(2)
    print("Please type either 'strain', 'stress' or 'youngs' to get started...")
    sleep(1)
    print("----------")
    youngsInput = input("What's your choice? -> ")
    if youngsInput == youngsChoices[0]:
        print("----------")
        sleep(1)
        print("So if you want to calculate strain the equation would be;\nΔL / Length - Lets get practising one...")
        sleep(1)
        print("**The change in length may be specified in the question**")
        sleep(1)
        print("**Try calculate it on your own first and use the program to double check your answer**")
        sleep(1)
        print("Type either 'changeInLength', 'length' or 'strain' to get started.")
        print("**Take into account that both inputs and outputs will not be converted so insert values in mm when it asks for length**")
        strainChoice = input("What's your choice? -> ")
        if strainChoice == strainChoices[0]:
            print("----------")
            print("To calculate the change in length we use the following equation:\nΔL = Strain * Length")
            strainΔL = float(input("What's the value of strain? -> "))
            lengthΔL = float(input("What was the original length? -> "))
            ΔLSC = float(strainΔL) * float(lengthΔL)
            sleep(2)
            print("The change in length would be:"'{:3f}'.format(ΔLSC))
        elif strainChoice == strainChoices[1]:
            print("----------")
            sleep(1)
            print("To calculate length we would use:\nLength = ΔL / Strain")
            sleep(1)            
            ΔLength = float(input("What's the change in length? -> "))
            strainL = float(input("What's the value of strain? -> "))
            lengthL = float(ΔLength) / float(strainL)
            sleep(1)
            print("The original length was:",'{:3f}'.format(lengthL))
        elif strainChoice == strainChoices[2]:
            print("----------")
            sleep(1)
            print("To calculate strain the equation is:\nΔL / Length")
            sleep(1)
            ΔL = float(input("What's the change in length? -> "))
            length = float(input("What was the original length? -> "))
            strain = float(ΔL) / float(length)
            sleep(1)
            print("If you got the your answer equal to this try practising a few more just like it then you'll be able to do these in a snap :)\nMy answer was:",'{.3f}'.format(strain))
        else:
            print("----------")
            print("Please enter a valid input next time.")
            
    elif youngsInput == youngsChoices[1]:
        print("----------")
        sleep(1)
        print("The equation to calculate stress is:\nStress = Force / Area.")
        sleep(1)
        print("Please type either 'area', 'force', or 'stress' to get started.")
        stressInput = str(input("What's is your response? -> "))
        if stressInput == stressChoices[0]:
            print("You want to calculate area? Well the equation is as follows:\nArea = Force * Stress")
            sleep(1)
            forceAR = float(input("The force in action is -> "))
            stressA = float(input("The stress in action is -> "))
            areaA = float(forceAR) / float(stressA)
            print("The total area is:",'{:3f}'.format(areaA))
        elif stressInput == stressChoices[1]:
            print("Force is your choice? The equation would be:\nForce = Area * Stress")
            sleep(1)
            areaF = int(input("What's the total area? -> "))
            stressF = int(input("What's the stress? -> "))
            forceF = float(stressA) * float(areaA)
            sleep(1)
            print("The force in newtons is",'{:3f}'.format(forceF))
        elif stressInput == stressChoices[2]:
            print("Stress is quite the easy one to complete to your full extentive engineering abilities.")
            sleep(1)
            areaS = float(input("What's the total area? -> "))
            forceS = float(input("What's the force acting upon the object? -> "))
        else:
            print("----------")
            sleep(1)
            print("Please enter a valid term as provided above.")
            stressRedo()
    elif youngsInput == youngsChoices[2]:
        print("----------")
        sleep(1)
        print("The equation for young's modulus is ε = σ / e")
        sleep(1)
        print("As you've not asked to complete the other functions I'll ask you to fill in all inputs that will be displayed.")
        print("----------")
        areaY = float(input("What's the total area? -> "))
        forceY = float(input("What's the total force? -> "))
        ΔL = float(input("What's the change in length? -> "))
        lengthY = float(input("What's the original length -> "))
        σ = float(forceY) / float(areaY)
        e = float(ΔL) / float(lengthY)
        ε = float(σ) / float(e)
        sleep(1)
        print("The young's modulus is",'{:3f}'.format(ε))
    else:
        print("Please enter a valid term.")
        youngsRedo()

def Sheer_Force_Diagrams():
    print("This program will help you produce a Sheer Force Diagram.")
    sleep(3)
    print("The inputs are based off a diagram,\nwith three separate sub-lengths of the total length.")
    sleep(7)
    print("----------")
#Inputs, how the user will input data...

    length1 = input("What's the length from A to the first force? -> ")
    sleep(5)
    length2 = input("What's the length between force 1 & 2? -> ")
    sleep(5)
    length3 = input("What's the length from the second force to B? -> ")
    sleep(5)
    force1 = input("What's the first force in KN? -> ")
    sleep(5)
    force2 = input("What's the second force acting upon the beam in KN? -> ")
    sleep(7)

#MANIPULATION
    totalLength = float(length1) + float(length2) + float(length3)
    totalLoad = float(force1) + float(force2)
    sleep(2)
    print("If I'm not mistaken the total force should be",totalLoad)
    print("----------")
    point1 = (float(force1) * float(length1))
    point2 = (float(force2) *float(float(length1) + float(length2)))
    reactionAtB = float(point2) + float(point1)
    sleep(2)
    print("The reaction at B is",reactionAtB,"KN")
    sleep(2)
    print("The equation is the total length x Rb = reaction at B\nSo the new equation would be:\n reaction at B / total length = Rb")
    reactionForceB = float(reactionAtB) / float(totalLength)
    sleep(2)
    print("Rb =",reactionForceB,"KN")
    sleep(7)
    print("Now for the reaction at A!")
    reactionatA = float(totalLoad) - float(reactionForceB)
    sleep(5)
    print("Ra =",reactionatA,"KN")

#def Bending_Moment_Diagrams():

def Potential_Energy():
    print("----------")
    sleep(1)
    print("Potential Energy is calculated using mass, gravity and height.")
    sleep(1)
    print("Type either 'gravity', 'height', 'mass', or 'potential' to get started.")
    potentialInput = str(input("What's your choice? -> "))
    if potentialInput == potentialChoices[0]:
        print("----------")
        sleep(1)
        print("The equation is g = PE /m x h ")
        PEG = float(input("Total potential energy? -> "))
        massG = float(input("What's the total mass? -> "))
        heightG = float(input("What's the height of the object? -> "))
        mhG = float(massG) * float(heightG)
        gravityG = float(PEG) / float(mhG)
        sleep(1)
        print("The gravitation force acting upon the object is:",'{:3f}'.format(gravityG))
    elif potentialInput == potentialChoices[1]:
        print("----------")
        sleep(1)
        print("The equation would be h = PE / m x g ")
        PEH = float(input("Total potential energy? -> "))
        massH = float(input("Total mass? -> "))
        gravityH = float(input("Total graviational pull? -> "))
        mgH = float(massH) * float(gravityH)
        heightH = float(PEH) / float(mgH)
        sleep(1)
        print("The height in metres at which potential energy was reached at was:",'{:3f}'.format(heightH))
    elif potentialInput == potentialChoices[2]:
        print("----------")
        sleep(1)
        print("The equation is m = PE / g x h ")
        PEM = float(input("Total potential energy? -> "))
        gravityM = float(input("Total gravitational force? -> "))
        heightM = float(input("Maximum height reached? -> "))
        ghM = float(gravityM) * float(heightM)
        massM = float(PEM) / float(ghM)
        sleep(1)
        print("The mass of the object would be:",'{:3f}'.format(massM))
    elif potentialInput == potentialChoices[3]:
        print("----------")
        sleep(1)
        print("The equation is PE = m x g x h ")
        massPE = float(input("What's the total mass? -> "))
        gravityPE = float(input("What's the total gravitational force? -> "))
        heightPE = float(input("What's the maximum height? -> "))
        PEJ = float(massPE) * float(gravityPE) * float(heightPE)
        sleep(1)
        print("The potential energy in joules is:",PEJ)
        PEKJ = float(PE) / float(1000)
        sleep(1)
        print("The potential energy in kilojoules is:",PEKJ)
    else:
        print("Please retry the function again as you entered in an invalid expression. :)")
        sleep(1)
        potentialRedo()
def Kinetic_Energy():
    print("----------")
    sleep(1)
    print("This function will help teach you how to effectively use the kinetic energy formula:\nKE = ½ mv^2    ;)")
    sleep(1)
    print("To get started type one of the following, if you make a mistake hit the reset button on the RESETS window.\nType either 'energy', 'mass' or 'velocity'.")
    kineticsInput = str(input("Which are you wanting help doing? -> "))
    if kineticsInput == kineticsChoices[0]:
        print("----------")
        sleep(1)
        print("The equation is: KE = ½ x m x v^2")
        massK = float(input("What's the mass? -> "))
        velocityK = float(input("What's the velocity? -> "))
        velocityKE = float(velocityK) **2
        KE = float(0.5) * float(massK) * float(velocityKE)
        sleep(1)
        print("The kinetic energy in joules is:",'{:3f}'.format(KE))
        KEKJ = float(KE) / float(1000)
        print("The kinetic energy in kilojoules is:",'{:3f}'.format(KEKJ))
    elif kineticsInput == kineticsChoices[1]:
        print("----------")
        sleep(1)
        print("The equation is m = KE / ½ x v^2")
        KEM = float(input("What's the total kinetic energy? -> "))
        half = float(0.5)
        velocityM = float(input("What's the velocity? -> "))
        V2M = float(velocityM) **2
        massKEM = float(KEM) / float(float(half) * float(V2M))
        sleep(1)
        print("The mass of the object is:",'{:3f}'.format(massKEM))
    elif kineticsInput == kineticsChoices[2]:
        print("----------")
        sleep(1)
        print("The equation is v^2 = KE / ½ x m")
        KEV = float(input("Total kinetic energy? -> "))
        halfV = float(0.5)
        massV = float(input("What's the mass? -> "))
        v2V = float(KEV) / float(v2)
        v2 = float(halfV) * float(massV)
        sleep(1)
        print("The velocity squared is:",'{:3f}'.format(v2))
    else:
        print("You've entered in a invalid expression...")
        sleep(1)
        kineticRedo()
def Drag_Force():
    print("----------")
def Momentum():
    print("----------")
    sleep(1)
    print("The main equation is p = m * v.")
    sleep(2)
    print("Type either 'mass', 'momentum' or 'velocity' to begin...")
    momentumInput = input("What's your choice? -> ")
    if momentumInput == momentumChoices[0]:
        print("----------")
        sleep(1)
        print("To calculate mass the re-arrangement would be as follows:\nMass = Momentum / Velocity.")
        momentumM = float(input("Momentum of the object? -> "))
        velocityM = float(input("Velocity of the object? -> "))
        massMomentum = float(momentumM) / float(velocityM)
        sleep(1)
        print("The mass of the object is:",'{:3f}'.format(massMomentum))
    elif momentumInput == momentumChoices[1]:
        print("----------")
        sleep(1)
        print("In order to calculate momentum use the main equation!")
        massMom = float(input("What's the mass? -> "))
        velocityMom = float(input("What's the velocity of the object? -> "))
        momentumMom = float(massMom) * float(velocityMom)
        sleep(2)
        print("The momentum of object A is:", '{:3f}'.format(momentumMom))
    elif momentumInput == momentumChoices[2]:
        print("----------")
        sleep(1)
        print("When calculating velocity use\nVelocity = Momentum / Mass!")
        momentumVel = float(input("What's the momentum? -> "))
        massVel = float(input("What's the mass? -> "))
        velocityVel = float(massMom) * float(velocityMom)
        sleep(2)
        print("The velocity of object A is:", '{:3f}'.format(velocityVel))
    else:
        print("----------")
        sleep(1)
        print("Next time input a valid expression please...")
        sleep(1)
        momentumRedo();
def Friction_Force():
    print("----------")
    sleep(1)
    print("So to you are seeking help on friction force I see? Well I'm just the right function for the job. In fact I'm the only function capable!")
    sleep(1)
    print("Type either 'coefficient', 'friction' or 'normal'.")
    frictionInput = str(input("Your choice is? -> "))
    if frictionInput == frictionChoices[0]:
        print("----------")
        sleep(1)
        print("The equation to find out the co-efficient is:\nu = Ff / Fn.")
        sleep(1)
        print("Attempt to calculate this beforehand.")
        sleep(10)
        frictionU = float(input("The friction force? -> "))
        normalU = float(input("What's the normal force -> "))
        coefficientU = float(frictionU) / float(normalU)
        sleep(1)
        print("The coefficient is:"'{:3f}'.format(coefficientU))
    elif frictionInput == frictionChoices[1]:
        print("----------")
        sleep(1)
        print("Use the unchanged equation.\nFf = u * Fn")
        print("Attempt this before the computer completes it for you.")
        sleep(10)
        uF = float(input("What's the coefficient? -> "))
        normalF = float(input("What's the value of mg? -> "))
        frictionF = float(uF) * float(normalF)
        sleep(1)
        print("The friction force would be:"'{:3f}'.format(frictionF))
    elif frictionInput == frictionChoices[2]:
        print("----------")
        sleep(1)
        print("Use the rearranged equation Fn = Ff / u")
        frictionN = float(input("What's the friction force? -> "))
        uN = float(input("What's the coefficient? -> "))
        normalN = float(frictionN) / float(uN)
        sleep(1)
        print("The normal force is:"'{:3f}'.format(normalN))
    else:
        print("----------")
        sleep(1)
        print("You've inputted an invalid response, so you'll have to try again.")
        frictionRedo()

def Suvats():
    print("----------")
    sleep(1)
    print("This function will help you overcome any suvat problem with speed and efficiency.")
    sleep(2)
    print("Step 1 - Identify all the variables given in  the question.  A format that can be used to make it easier to remember would be;/n   \nS=\nU=\nV=\nA=\nT= \n     \nNext just fill in the gaps say for insance you had an acceleration of 2.67ms^-2, a total time of 14 seconds and a inital velocity of 53 where you wanted to find the final velocity , you would then fill out those gaps you created earlier with the = sign.\nS = //\nU = 53\nV = ?\nA = 2.67\nT = 14")
    sleep(2)
    print("")
    print("Note the use of a // and ?. The // is commonly used within programming languages such as C# where it indicates to the program that this is an irrevalent factor. Futhermore, the ? is a representation of an answer that we are seeking i.e. I wonder what the final velocity is?")
    print("")
    sleep(2)

def Centroids():
    print("----------")
    sleep(1)
    print("This function will help calculate the centre of a centroid...")
    sleep(1)
    print("Let's begin by drawing a diagram to help us visually understand what is to happen.")
    centroidInput = str(input("What's the shapes involved i.e. triangle and semi-circles.\nType either 'triangleSquare' or 'triangleSemi-circle' -> "))
    if centroidInput == centroidChoices[0]:
#        thread.start_new_thread
        turtle.pensize(2)
        turtle.speed(1)
        turtle.color("blue")
        turtle.penup()
        turtle.goto(-100, 0)
        
        turtle.pendown()
        turtle.forward(150)
        turtle.left(90)
        turtle.forward(150)
        turtle.left(135)
        turtle.forward(212)
        turtle.left(135)
        turtle.forward(300)
        turtle.left(90)
        turtle.forward(150)
        turtle.left(90)
        turtle.forward(150)
        turtle.penup()
        turtle.goto(-100, 0)
        turtle.right(180)

        print("----------")
        print("This diagram should help identify how to solve the centre...\nYou know blue triangle that was moving, try and consider that as the origin point.")
        print("----------")
        sleep(2)
        print("Step 1 is to find all the variables such as the triangle length and areas...")
        sleep(1)

        totalLength = float(input("What's the total length? -> "))
        totalHeight = float(input("What's the total height? -> "))
        squareLength = float(input("What's the length of the square? -> "))
        triangleLength = float(totalLength) - float(squareLength)
        print("The length of the triangle is",'{:3f}'.format(triangleLength))
        triangleAreaM = float(triangleLength) * float(totalHeight)
        triangleArea = float(triangleAreaM) / float(2)

        sleep(1)
        print("The triangle area is", '{:3f}'.format(triangleArea))
        squareArea = float(squareLength) * float(totalHeight)
        print("The square area is", '{:3f}'.format(squareArea))
        totalArea = float(triangleArea) + float(squareArea)
        print("The total area is",'{:3f}'.format(totalArea))
        sleep(2)

        print("----------")
        sleep(1)
        print("Step 2 is to write an equation...")
        sleep(1)
        print("The equation in your case would be (2/3 of triangle length) / (1/3 of the triangle height) x triangle area then this is added to half the square's x and y values being multiplied by the square's area.")
        sleep(2)
        print("Now try write out the equation from the values you've given the program.")
        sleep(5)
        print("To find the x co-ordinate we just do the top row of the equation so ONLY the X values!\nI'm going to do this while you do it too.\nRemember the x value for the square is the triangle length added to half the length of the square.\nThe program will slowly count 90 seconds giving you enough time to calculate the x y co-ords")
        part1X = float(float(triangleLength) / float(3) * float(2)) * float(triangleArea) + float(float(float(squareLength) / float(2)) * float(squareArea))
        centroidX = float(part1X) / float(totalArea)
        part2Y = float(float(totalHeight) / float(3)) * float(triangleArea) + float(float(float(totalHeight) / float(2) * float(totalArea)))
        centroidY = float(part2Y) / float(totalArea)
        sleep(90)
        print("The centroid is", '{:3f}'.format(centroidX, centroidY))
    elif centroidInput == centroidChoices[1]:
        turtle.pensize(2)
        turtle.speed(3)
        turtle.color("#009900")
        def curveMove():
            for i in range(50):
                turtle.forward(6.594)
                turtle.right(2.5)
        #move the turtle into the correct position
        turtle.penup()
        turtle.goto(-350, 0)
            
        #Start drawing the triangle section...
        turtle.pendown()
        turtle.forward(150)
        turtle.left(90)
        turtle.forward(150)
        turtle.left(135)
        turtle.forward(212)
        turtle.left(135)
        turtle.penup()

        #Draw the semi circle section...
        turtle.goto(-50, 300)
        turtle.pendown()
        curveMove()

        #Write some Text!
        turtle.penup()
        turtle.goto(-350, -50)
        turtle.color("#000000")
        turtle.pendown()
        turtle.write("The turtle will not go to the position that will best represent the origin.", font=("Helvetica", 16))
        turtle.penup()
        turtle.goto(-350, -100)
        turtle.pendown()
        turtle.write("The formula to find the centroid of a semi-circle is 4 * Radius / 3 * Pi .", font=("Helvetica", 16))

        print("Let's go through this in stages.\nStep 1 - find all the necessary variables.")
        triangleSECLength = int(input("The length of the triangle? -> "))
        triangleSECHeight = int(input("The height of the triangle? -> "))
        circleSECRadius = int(input("What's the radius of the circle? -> "))
        twoThirds = float(float(triangleSECLength) / float(3) * float(2))
        oneThirds = float(triangleSECHeight) / float(3)
        triangleSECArea = float(float(triangleSECLength)  * float(triangleSECHeight))  / float(2)
        circleSECArea = float(float(Pie) * float(circleSECRadius)) / float(2)
        circleX = float(float(4) * float(circleSECRadius)) / float(float(3) * float(Pie))
        sleep(2)
        print("     ")
        sleep(1)
        print("Step 2 - Now we create the equation.\nTriangleX / TriangleY x Triangle Area + Semi-circleX[The formula is 4*radius / 3*Pi] / semi-circleY(This is just the radius) x semi-circle area . ")
        print("To avoid errors the program won't be creating an equation so you'll have to write one yourself.")
        sleep(2)
        print("     ")
        sleep(1)
        print("Step 3 - Next your going to solve your equation one row at a time;\nTriangleX x triangle area + semi-circleX x  semi-circle area .")
        SECentroidX = float(float(twoThirds)  * float(triangleSECArea)) + float(float(circleX) * float(circleSECArea))
        print("     ")
        sleep(1)
        print("Step 4 - Complete the bottom row;\nTriangleY x triangle area + radius x semi-circle area . ")
        SECentroidY = float(float(oneThirds) * float(triangleSECArea)) + float(float(circleSECRadius) * float(circleSECArea))
        print("     ")
        sleep(1)
        print("Step 5 - The final step is to clearly show the examiner your answers like so...")
        print("     ")
        print(SECentroidX)
        print("     ")
        print(SECentroidY)
        
sleep(1)
introInstructions = tkinter.Label(window, text="This program has been designed to help you with Unit 3 Mechanics equations and questions.\nPlease read all of the instructions before typing on the keyboard", font=("Arial", 12))
extraInstructions = tkinter.Label(window, text="Click the correct coloured button that matches the function you want to complete.", font=("Arial", 12))
furtherInstructions = tkinter.Label(window, text="After clicking on a button switch to the window with the blue text in it!\nAny button text that is coloured in gray is disabled button meaning that it's code hasn't been added into the program yet.", font=("Arial", 12))
forceButton = tkinter.Button(window, text="Force", bg="#cc0000", fg="#ffffff", bd="2", command = Force)
modulusButton = tkinter.Button(window, text="Young's Modulus", bg="#0000cc", fg="#ffffff", bd="2", command = Youngs_Modulus)
sheerButton = tkinter.Button(window, text="Sheer force Diagrams", bg="#00cc00", fg="#ffffff", bd="2", command = Sheer_Force_Diagrams)
bendingButton = tkinter.Button(window,text="Bending Moment Diagrams", bg="#ff9900", fg="#ffffff", bd="2", state="disabled")
potentialButton = tkinter.Button(window, text="Potential Energy", bg="#cc0099", fg="#ffffff", bd="2",command = Potential_Energy)
kineticButton = tkinter.Button(window, text="Kinetic Energy", bg="#b3b300", fg="#ffffff", bd="2", command = Kinetic_Energy)
momentumButton = tkinter.Button(window, text="Momentum", bg="#009999", fg="#ffffff", bd="2", command = Momentum)
frictionButton = tkinter.Button(window, text="Friction Force", bg="#339933", fg="#ffffff", bd="2", command = Friction_Force)
suvatsButton = tkinter.Button(window, text="SUVATS", bg="#990000", fg="#ffffff", bd="2", command = Suvats)
centroidButton = tkinter.Button(window, text="Centroids", bg="#0066ff", fg="#ffffff", bd="2", command = Centroids)
questionsButton = tkinter.Button(window, text="Questions", bg="#7a7a52", fg="#ffffff", bd="2", state="disabled")
introInstructions.pack()
extraInstructions.pack()
furtherInstructions.pack()
forceButton.pack()
modulusButton.pack()
sheerButton.pack()
bendingButton.pack()
potentialButton.pack()
kineticButton.pack()
momentumButton.pack()
frictionButton.pack()
suvatsButton.pack()
centroidButton.pack()
questionsButton.pack
window.mainloop()
